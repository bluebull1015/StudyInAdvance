다음 용어들을 자료 조사 해보세요.
클래스를 공부하는 데 필요한 내용입니다.
용어들에 대한 개념을 잡아 오시면 됩니다.
책에 있는 내용 말고, 본인의 생각을 정리해 보시면 됩니다.
자료 조사를 하다 보면 c++에 대한 얘기도 나올 수 있는 데, 
가볍게 읽어 보시면 됩니다.
----------------------------------------------------------------------------
숙제 01-01
(1)클래스가 무엇인가요?
: 자동차의 "부품 설계도" 또는 "완성된 부품" 같다. 클래스 자체는 설계도이고, 변수와 메서드 생성자를 추가하면 완성된 부품이 된다.

(2)객체는 무엇인가요?
@자바에서 객체는 메모리에 할당된 실체를 말한다. 객체는 힙(Heap) 메모리에 저장되며, 참조를 통해 접근된다.
@자바에서의 객체는 클래스를 기반으로 생성된다.

(3)클래스의 3가지 구성 요소는 무엇인가요?
: 필드, 메서드, 생성자이다.  
@필드는 자동차의 연료상태,색상,속도 등과 같은 속성과 상태를 나타내고, 메서드는 주행과 정지 같이 동작을 나타내며 생성자는 효율적이고 실수 없이 안전하게 자동차를 조립하도록 하는 생산공정과 같다. 
@필드와 지역변수 : 클래스 내부와 메서드와 생성자 밖의 범위에서 선언된 변수를 필드라고 하고, 메서드나 생성자 또는 블록 내부에 선언된 변수를 지역 변수라고 한다.
@생성자 내부에서 선언된 변수는 Heap에 저장되더라도 지역 변수로 간주된다.생성자 안에 new키워드로 객체를 생성(Heap 메모리에 저장)했다고 해서 필드가 아니다. 왜냐하면 Heap메모리의 객체를 참조하는 변수는 Stack 메모리에 저장된 지역변수이기 때문이다. 
@생성자: 클래스와 이름이 동일할 때 생성자로 간주된다.
@생성자: 생성자는 반환 타입을 명시하지 않는다.
@생성자 형식 : "클래스 이름" "참조 변수" = new "생성자";


숙제 01-02
(1)자바의 static, stack, heap 메모리에 대하여 조사해 보세요.
static 메모리란 프로그램이 실행되는 동안 고정적으로 할당되는 메모리 영역을 의미한다. 자바에서는 메서드영역(Method Area)이라는 명칭을 사용한다.
heap 메모리는 모든 객체와 배열이 저장되는 공간으로, 자바에서는 Garbage Collector가 사용하지 않는 객체를 자동으로 해제한다. heap메모리는 공유자원으로 프로세스에 속한 모든 스레드 들이 공유한다(프로세스에 속한 여러 스레드가 접근하여 같은 프로세스의 전역 변수나 객체를 공유하며 협력한다). 
stack 메모리는 메서드 호출 시 생성되는 지역 변수와 메서드 실행 정보를 저장한다. 각 스레드마다 독립적인 stack메모리를 가진다.

@프로세스는 운영 체제에서 실행 중인 하나의 프로그램을 말한다. 스레드는 프로세스 내에서 실행되는 독립적인 작업 단위이다.
@생성자 내에서 new 키워드로 생성된 객체는 Heap 메모리에 저장되지만, 이를 참조하는 변수 자체는 스택 메모리에 저장된 지역 변수입니다.
@객체란 상태(필드)와 행동(메서드)를 가지는 자바에서의 모든 데이터 구조이다.
@실체란 Heap 메모리에 생성된 실체를 말한다.
@실체(Heap 메모리)의 예로는 클래스의 인스턴스, 배열, 내부 클래스의 인스턴스, 익명 클래스의 인스턴스, 인터페이스의 구현체 등이 있다.


(2)static 키워드는 언제 사용하면 좋을까요.
a. 클래스의 모든 객체가 공유해야 하는 데이터나 메서드가 있을 때 static 키워드를 사용하면 좋다. 공통 데이터 관리에 적합하기 때문이다. 
public과 헷갈릴 수 있기 때문에 설명을 붙이면 public필드나 메서드는 객체마다 독립적인 메모리 공간이 할당되고 static필드는 클래스 로드시 메모리 공간에 할당되므로, 모든 객체가 같은 필드에 접근하고 값을 공유할 수 있다.

b. 클래스 전체에서 공유될 변하지 않는 값(상수)를 정의할 때 사용하면 좋다.

c. 인스턴스 없이 호출 가능한 메서드를 만들 수 있다. 이렇게 하면 코드를 간결하고 효율적으로 유지할 수 있다.
추가로 설명하자면 객체 상태(인스턴스 변수)와 무관하다면 굳이 객체를 생성하지 않아도 된다. 예를 들어 수학 연산과 같이 객체상태(인스턴스 변수)와 관련이 없는 기능에 적합하다.


(3)static 변수, 인스턴스 변수, 지역 변수의 각 특징은 어떠한 것이 있으며, 각각 어떠한 경우에 사용하나요.
a. static(스태틱) 변수 : 정적변수라고도 하며, 클래스 로딩 시 메모리(Method Area)에 한 번만 생성되고 모든 객체가 공유하며, 같은 값을 참조하고 클래스 이름으로 바로 접근할 수 있다. 생명 주기는 프로그램이 종료될 때까지 유지된다.
 - 공통 데이터를 저장하거나 모든 객체가 공유해야 하는 겂을 저장할 때 사용한다.

b. instance(인스턴스) 변수 : 객체 변수라고도 하며, 객체마다 독립적으로 존재한다. 객체 생성 시 Heap메모리에 할당되며 객체가 소멸될 때까지 유지된다. 가 객체마다 고유한 값을 가질 수 있고, this 키워드를 사용해 접근한다.
 - 객체별로 고유한 상태를 저장해야 할 때 사용한다. 

c. local(지역) 변수 : 메서드나 블록 내에서 선언된 변수로, 선언된 범위 내에서만 사용할 수 있다. Stack 메모리에 저장되며 메서드 실행이 종료되면 메모리에서 제거되고, 다른 메서드나 블록에서는 사용할 수 없으며, 반드시 초기화 후 사용해야 한다.
 - 메서드나 블록 내에서 임시적으로 사용해야 하는 데이터를 저장할 때 사용한다. 


숙제 01-03
(1)접근 지정자(제어자)란 무엇이며, 이런 개념이 왜 필요하나요?
 a. 접근 지정자(제어자)란 클래스, 메서드, 필드(변수)에 대한 접근 범위를 제한하는 키워드이다. 접근 지정자(제어자)는 public, protected, default, private이 있다.
 b. 접근 지정자(제어자)가 필요한 이유는 캡슐화, 보안과 무결성 유지, 코드 관리를 위해서이다.
  - 캡슐화: 데이터와 메서드를 보호해, 외부에서 직접 접근하지 못하게 하며, 잘못된 사용을 방지한다. 객체의 내부 구현을 숨기고, 필요한 경우에만 공개한다. 
  - 보안과 무결성 유지: 데이터의 유효성(데이터가 범위와 형식의 올바른 상태를 가지도록 보장)을 보장하고, 무분별한 수정으로 인한 오류를 방지한다(필드에 직접 접근하지 못하도록 private을 설정하여 무분별한 수정으로 인한 오류를 방지할 수 있다). 
  - 코드 관리: 접근 범위를 명확히 정의해 클래스 간의 의존성을 줄이고 유지보수를 쉽게 만든다.
(2)getter(), setter()란 무엇인가요?
 a. Gatter: 클래스의 private 필드 값을 읽기 위한 메서드.
 b. Setter: 클래스의 private 필드 값을 변경하기 위한 메서드.
 c. Gatter와 Setter는 private 필드의 값을 읽거나 수정하기 위한 메서드이다. 데이터 유효성 검증, 필드 보호, 유지보수성 증가를 위해서 사용한다.
  - 데이터 유효성: Gatter와 Setter를 사용하면, 필드 값을 읽거나 수정할 때 데이터의 유효성을 검증할 수 있다. 이는 프로그램이 예상치 못한 값으로 동작하지 않도록 보장한다.
  - 필드 보호: Gatter와 Setter는 필드를 직접 접근할 수 없게 보호하며, 이를 통해 데이터의 무분별한 수정과 외부 간섭을 방지한다.
  - 유지보수성 증가: Gatter와 Setter는 클래스 내부 구현을 캡슐화하여, 내부 로직을 변경하더라도 외부 코드에 영향을 최소화한다.

(3)this 키워드란 무엇인가요?
 a. this는 현재 객체를 참조하는 키워드이다. 클래스 내부에서 현재 객체의 필드, 메서드, 생성자에 접근하거나 다른 객체와 구분할 때 사용된다.
 b. this의 필요성
  - 인스턴스 변수와 매개변수 구분 : 클래스의 인스턴스 변수와 메서드나 생성자의 매개변수 이름이 동일할 때, this를 사용해 현재 객체의 인스턴스 변수를 명시적으로 참조한다(this가 붙은 변수가 인스턴스 변수이다).
  - 인스턴스 변수 참조
   -클래스의 인스턴스 변수와 메서드나 생성자의 매개변수 이름이 동일할 때, this를 사용해 현재 객체의 인스턴스 변수를 명시적으로 참조합니다.
   -예: this.name = name; (매개변수 name과 인스턴스 변수 name 구분)

  -현재 객체의 메서드 호출
   -같은 클래스 내에서 다른 메서드를 호출할 때 this를 사용하여 현재 객체의 메서드를 호출합니다.
   -예: this.calculate(); (현재 객체의 메서드 호출)

  -생성자 간 호출
   -같은 클래스 내에서 다른 생성자를 호출할 때 this()를 사용하여 초기화 과정을 간소화합니다.
   -예: this(name, 0); (다른 생성자를 호출)

  -현재 객체 전달
   -this를 사용해 현재 객체를 다른 메서드나 객체에 전달할 수 있습니다.
   -예: someMethod(this); (현재 객체를 메서드로 전달)


숙제 01-04
(1)생성자의 정의와 필요성 및 생성하는 방법에 대하여 조사해 보세요.
 a. 생성자: 생성자는 객체가 생성될 때 호출되는 특별한 메서드이로, 클래스의 인스턴스를 초기화한다.
  - 생성자의 이름은 클래스 이름과 동일해야 하며, 반환 타입이 없고, 반환 타입을 명시하지 않아도 된다.
 b. 생성자의 필요성
  - 객체 초기화 : 생성자는 객체가 생성될 때 인스턴스 변수(필드)를 초기화하거나 특정 동작을 수행하도록 설정한다.
  - 객체 사용의 일관성 : 객체가 생성되는 동시에 필요한 값들을 설정함으로써, 객체 사용의 일관성을 보장한다.
  - 중복 코드 방지 : 생성자를 통해 초기화 로직을 캡슐화함으로써, 객체 초기화 코드를 재사용할 수 있다.

(2)생성자와 메소드의 차이는 무엇인가요.
 a. 정의 목적: 생성자는 객체 초기화가 목적이고, 메서드는 객체의 동작을 정의하는 것이 목적이다.
 b. 이름: 생성자는 클래스 이름과 동일하고, 메서드는 개발자가 원하는 이름으로 정의 가능하다. 
 c. 반환 타입: 생성자는 없다(void도 명시하지 않는다). 메서드는 반환 타입을 명시해야 한다.
 d. 호출 시점: 생성자는 객체 생성 시 자동 호출된다. 메서드는 명시적으로 호출해야 한다.
 e. 역할: 생성자는 객체의 필드나 상태를 초기화하고, 메서드는 객체의 특정 기능을 수행한다.


(3)오버로딩이란 무엇이며, 이런 개념이 왜 필요하나요?
 a. 오버로딩: 같은 이름의 메서드나 생성자를 매개변수의 개수나 타입을 다르게 정의하는 것을 의미한다. 즉 하나의 이름으로 여러 개의 메서드(또는 생성자)를 정의하는 것이다.
 b. 오버로딩의 필요성
  - 편의성 제공: 같은 작업을 수행하지만 매개변수의 형태나 개수가 다른 경우, 메서드 이름을 동일하게 하여 코드 가독성을 높인다.
  - 코드 재사용성 증가: 작업의 종류에 따라 여러 이름의 메서드를 만들 필요 없이, 하나의 잉름으로 다양한 경우를 처리할 수 있다.
  - 다형성(Polymorphism)의 구현: 메서드 호출 시 컴파일러가 매개변수에 따라 적절한 메서드를 선택하도록 하여 유연성을 제공한다. 

클래스로 구현해 볼 예정이니, 개인적으로 좋아하는 품목이나 취미 1개만 생각해 오세요.
예시) 
	영화 : 제목, 감독, 상영시간, 관람 가격, 장르 등등
	자동차 : 가격, 구동 방식, 연비 등등
----------------------------------------------------------------------------주말에 여기까지 숙제.
숙제 02
상속이란 무엇인가요?
상속 관계의 부모와 자식 클래스에서 생성자는 어느 쪽이 먼저 호출되는가요?
super 키워드는 누구를 지칭하는 건가요?
오버라이딩이란 무엇이며, 이러한 개념이 왜 필요할까요.
참조(레퍼런스) 형변환이 무엇인가요?
참조(레퍼런스) 형변환이 왜 필요할까요?
final 메소드란 무엇이며, 어떠한 경우에 사용할 수 있나요.
자바에서 제공하는 대표적인 final 클래스에는 어떠한 것이 있나요.
----------------------------------------------------------------------------
숙제 03
추상 클래스가 왜 필요한지 한번 조사해 보세요.
추상 클래스는 어떻게 만드나요?
final 메소드와 추상 메소드의 공통점과 차이점은 무엇인가요?
추상 클래스를 불완전 클래스라고 하는 이유는 무엇인가요?
인터페이스가 왜 필요한지 한번 조사해 보세요.
인터페이스는 어디에 사용할 수 있나요?
----------------------------------------------------------------------------
숙제 04
배열과 컬렉션의 공통점과 차이점은 무엇인가요.
확장 for 구문 또는 향상된 for 구문이란 무엇이며, 주로 어떤 경우에 많이 사용되나요.

자바 컬렉션은 크게 Set, Map, List의 3가지 유형이 인터페이스가 있습니다. 
3가지 유형에 대하여 다음 항목을 각각 조사해 보세요.
1) 순서를 따지는가.
2) 중복 데이터를 허락하는가.
3) 요소에 대한 추가/찾기/개수/삭제/수정 등의 메소드는 어떠한 것이 있나요.
4) 이를 구현한 구체화 클래스에는 어떠한 것이 있는가.(간략하게 목록만 찾아 보기)
5) 일상 생활에서 어떠한 예시를 들수 있나요.


제네릭(generic)이란 무엇이며 어떤 경우에 사용되나요.

선입선출(FIFO)과 후입선출(LIFO)이란 무엇인가요.
적절한 예시에는 어떠한 것들이 존재하나요.

다음 항목들은 어떠한 컬렉션(Set, List, Map 중 택일)으로 사용하면 좋은가요
1) 수학의 집합
2) 특정 사이트의 게시물 목록
3) 로그인시 필요한 다음 정보
	id=hong, name=홍길동, password=ab123
4) 로또 번호 추출하기
5) 한정판 제품을 구매하기 위한 대기자 명단
	
텍스트 파일 또는 워드/엑셀/피피티 문서	형식으로 제출해 주시면 됩니다.
제출 기한) 2024년 01월 03일
이메일) ugcadman@naver.com
----------------------------------------------------------------------------

지금까지 배운 내용들을 이용하여 여러분의 관심 사항에 대하여 클래스를 구현하고, 이를 제출해 주세요.
제한시간 ) 3시간

내용) 클래스, 객체, 메소드, this, static, final, getter/setter, 오버로딩, 생성자, 연산자, 제어문 등등
이메일) ugcadman@naver.com